{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":91716,"databundleVersionId":11893428,"sourceType":"competition"}],"dockerImageVersionId":31012,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport math\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras import layers\nfrom keras.callbacks import EarlyStopping\nfrom sklearn.model_selection import train_test_split,KFold\nfrom sklearn.preprocessing import MinMaxScaler\nfrom sklearn.metrics import mean_squared_error\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:51.161034Z","iopub.execute_input":"2025-05-08T16:09:51.161487Z","iopub.status.idle":"2025-05-08T16:09:51.171900Z","shell.execute_reply.started":"2025-05-08T16:09:51.161456Z","shell.execute_reply":"2025-05-08T16:09:51.170359Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train =pd.read_csv('/kaggle/input/playground-series-s5e5/train.csv',index_col='id')\ntest=pd.read_csv('/kaggle/input/playground-series-s5e5/test.csv',index_col='id')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:51.174206Z","iopub.execute_input":"2025-05-08T16:09:51.174620Z","iopub.status.idle":"2025-05-08T16:09:52.016644Z","shell.execute_reply.started":"2025-05-08T16:09:51.174587Z","shell.execute_reply":"2025-05-08T16:09:52.015468Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.Sex=train.Sex.map({'male':1,'female':0}).astype('float32')\ntest.Sex=test.Sex.map({'male':1,'female':0}).astype('float32')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:52.018202Z","iopub.execute_input":"2025-05-08T16:09:52.018578Z","iopub.status.idle":"2025-05-08T16:09:52.096783Z","shell.execute_reply.started":"2025-05-08T16:09:52.018542Z","shell.execute_reply":"2025-05-08T16:09:52.095844Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:52.097787Z","iopub.execute_input":"2025-05-08T16:09:52.098088Z","iopub.status.idle":"2025-05-08T16:09:52.138755Z","shell.execute_reply.started":"2025-05-08T16:09:52.098065Z","shell.execute_reply":"2025-05-08T16:09:52.137509Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.hist(train.Calories,bins=10)\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:52.141622Z","iopub.execute_input":"2025-05-08T16:09:52.142018Z","iopub.status.idle":"2025-05-08T16:09:52.333311Z","shell.execute_reply.started":"2025-05-08T16:09:52.141990Z","shell.execute_reply":"2025-05-08T16:09:52.332263Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.Calories.value_counts()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:52.334224Z","iopub.execute_input":"2025-05-08T16:09:52.334533Z","iopub.status.idle":"2025-05-08T16:09:52.353622Z","shell.execute_reply.started":"2025-05-08T16:09:52.334509Z","shell.execute_reply":"2025-05-08T16:09:52.352766Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"numeric_cols = train.columns\nnum_cols = len(numeric_cols)\n\ncols_per_row = 4\nrows_needed = math.ceil(num_cols / cols_per_row)\n\nfig, axes = plt.subplots(nrows=rows_needed, ncols=min(num_cols, cols_per_row), figsize=(15, 5 * rows_needed))\nfig.tight_layout(pad=3.0)\n\n# Flatten the axes array for easy indexing\naxes = axes.flatten()\n\nfor i, col in enumerate(numeric_cols):\n    ax = axes[i]\n    train[col].hist(ax=ax)\n    ax.set_title(col)\n    ax.set_xlabel(col)\n    ax.set_ylabel('Frequency')\n    ax.grid(True, linestyle='--', alpha=0.6)\n\n# Remove any extra subplots if the number of features\n# is not a perfect multiple of cols_per_row\nif num_cols < len(axes):\n    for i in range(num_cols, len(axes)):\n        fig.delaxes(axes[i])\n\nplt.show()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:52.354604Z","iopub.execute_input":"2025-05-08T16:09:52.354877Z","iopub.status.idle":"2025-05-08T16:09:54.072664Z","shell.execute_reply.started":"2025-05-08T16:09:52.354846Z","shell.execute_reply":"2025-05-08T16:09:54.071522Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"for i in numeric_cols:\n    print(f'{i} :{train[i].skew()}')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:54.073889Z","iopub.execute_input":"2025-05-08T16:09:54.074312Z","iopub.status.idle":"2025-05-08T16:09:54.154929Z","shell.execute_reply.started":"2025-05-08T16:09:54.074281Z","shell.execute_reply":"2025-05-08T16:09:54.153615Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X,y=train.drop('Calories',axis=1),train['Calories']\n\nX_train,X_val,y_train,y_val=train_test_split(X,y,test_size=0.1,random_state=42)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:54.155865Z","iopub.execute_input":"2025-05-08T16:09:54.156248Z","iopub.status.idle":"2025-05-08T16:09:54.292024Z","shell.execute_reply.started":"2025-05-08T16:09:54.156216Z","shell.execute_reply":"2025-05-08T16:09:54.290888Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"X_train.shape[1]","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:09:54.293016Z","iopub.execute_input":"2025-05-08T16:09:54.293373Z","iopub.status.idle":"2025-05-08T16:09:54.300553Z","shell.execute_reply.started":"2025-05-08T16:09:54.293350Z","shell.execute_reply":"2025-05-08T16:09:54.299554Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"def rmsle(y_true, y_pred):\n    \"\"\"\n    Calculates the Root Mean Squared Logarithmic Error (RMSLE).\n\n    Args:\n        y_true: The ground truth values.\n        y_pred: The predicted values.\n\n    Returns:\n        The RMSLE value.\n    \"\"\"\n    # Ensure both y_true and y_pred are greater than 0\n    # Use tf.clip_by_value instead of K.clip\n    y_true = tf.clip_by_value(y_true, tf.keras.backend.epsilon(), tf.reduce_max(y_true))  \n    y_pred = tf.clip_by_value(y_pred, tf.keras.backend.epsilon(), tf.reduce_max(y_pred)) \n    # Calculate the squared logarithmic error\n    log_diff = tf.math.log(tf.math.sqrt(y_pred) + 1) - tf.math.log(tf.math.sqrt(y_true) + 1) \n    # Calculate the mean squared logarithmic error\n    msle = tf.reduce_mean(tf.square(log_diff))\n    # Calculate the root mean squared logarithmic error\n    rmsle = tf.math.sqrt(msle)  \n    return rmsle\ntf.random.set_seed(42)\ninput_shape = (X_train.shape[1],)  # Enclose X_train.shape[1] in a tuple\n\n# Create Input layer\ninputs = keras.Input(shape=input_shape)\n\n# Define your model\nmodel = keras.Sequential([\n    inputs,  # Use Input layer as the first layer\n    layers.Dense(32, activation='swish'), \n    layers.BatchNormalization(),\n    layers.Dense(64, activation='swish'),\n    layers.BatchNormalization(),\n    layers.Dense(32, activation='swish'),\n    layers.BatchNormalization(),\n    layers.Dense(1, activation='linear') \n])\n\n\nEarly = EarlyStopping(monitor='val_loss', patience=10, restore_best_weights=True)\n\noptimizer = tf.keras.optimizers.Adam(clipvalue=1.0)  # Clip gradients to [-1, 1]\nmodel.compile(optimizer=optimizer, loss=rmsle)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:12:03.814228Z","iopub.execute_input":"2025-05-08T16:12:03.814637Z","iopub.status.idle":"2025-05-08T16:12:03.997440Z","shell.execute_reply.started":"2025-05-08T16:12:03.814610Z","shell.execute_reply":"2025-05-08T16:12:03.996224Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"his = model.fit(X_train, y_train, epochs=100, batch_size=512, validation_data=(X_val, y_val),callbacks=Early)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:12:10.276211Z","iopub.execute_input":"2025-05-08T16:12:10.276627Z","iopub.status.idle":"2025-05-08T16:13:40.099465Z","shell.execute_reply.started":"2025-05-08T16:12:10.276594Z","shell.execute_reply":"2025-05-08T16:13:40.098410Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"his=pd.DataFrame(his.history)\nhis['val_loss'].min()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:13:40.101096Z","iopub.execute_input":"2025-05-08T16:13:40.101441Z","iopub.status.idle":"2025-05-08T16:13:40.108698Z","shell.execute_reply.started":"2025-05-08T16:13:40.101412Z","shell.execute_reply":"2025-05-08T16:13:40.107805Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"his.iloc[:,0:].plot()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:13:53.667506Z","iopub.execute_input":"2025-05-08T16:13:53.667805Z","iopub.status.idle":"2025-05-08T16:13:53.910945Z","shell.execute_reply.started":"2025-05-08T16:13:53.667786Z","shell.execute_reply":"2025-05-08T16:13:53.909589Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_pred = model.predict(X_val)\nmsle = mean_squared_error(y_val, abs(y_pred))\nnp.sqrt(msle)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:13:57.778722Z","iopub.execute_input":"2025-05-08T16:13:57.779108Z","iopub.status.idle":"2025-05-08T16:14:02.353128Z","shell.execute_reply.started":"2025-05-08T16:13:57.779082Z","shell.execute_reply":"2025-05-08T16:14:02.352000Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"y_test = model.predict(test)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:14:02.710716Z","iopub.execute_input":"2025-05-08T16:14:02.711053Z","iopub.status.idle":"2025-05-08T16:14:17.202104Z","shell.execute_reply.started":"2025-05-08T16:14:02.711028Z","shell.execute_reply":"2025-05-08T16:14:17.201034Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"pd.DataFrame(y_test,index=test.index,columns=['rainfall']).to_csv('submission.csv')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-05-08T16:14:19.450783Z","iopub.execute_input":"2025-05-08T16:14:19.451262Z","iopub.status.idle":"2025-05-08T16:14:19.883724Z","shell.execute_reply.started":"2025-05-08T16:14:19.451231Z","shell.execute_reply":"2025-05-08T16:14:19.882522Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}